To Do's, Thoughts, and Research/Useful Resources

> Le Paramounts:
--> Finish commenting source code
--> Commit code to github, and then sort out issues/bugs and set up milestones
--> Ensure domain name is injected into all tpls rather than hard-coding it
--> Start setting up unit tests using PHPUnit

> Conventions used (over configuration)
--> 

> General To Do's:
--> Give the WebPageContentMapper the ability to update the data already in the db (and add new web page content?)
--> Minimal password requirements restriction? Should this logic go into User? If so, shift pws hashing to there as well

> Unsures:
--> What type should abstractPostDate be in AbstractPost? Date object?
--> There's a lot of repeated code between my LoginController and RegisterController...
--> Should my data mappers be bi-directional? (Breaks SRP?) Perhaps divide them to persisting the Domain Model and hydrating it?
--> None of my routes are actually using multiple models, so I have a fair amount of redundant code at the moment... Remove that code?
--> Should site have www. or no www subdomain? (latter preferred)
--> Trailing forward slash on URIs with route names and controller actions gives error. Should it? Or should the trailing forward slash be optional? What about extending the URI to pass in parameters to the controller action?
--> How to integrate subdomains into the application? Example: blog.domain.com/blog-post-name/
--> What is her return/refund policy
--> Copyrights?
--> Keep config files in one place (config/) or place them where they make sense? Should the dbconfig go in models/DataAccessLayer/ or stay in config/ ? Should domain model configuration go in config/ or in models/DomainModel/ ? Should routes configuration go in config/ or stay in routing/ ? Maybe set up shortcut links in config/ and place the files where they make the most sense?

> Remember To:
--> 

> Problems:
--> Where should I put the isLoggedIn checks? (In controllers atm.) Many actions will require privileges (i.e. an account, or a privileged account)
--> What to do with the validating business logic if a setting is changed to be more restrictive?
    Domain model objects will throw exceptions when being populated by data currently in the DB that does not adhere to the new (more restrictive) settings...
    2 possible solutions:
    --> 1. Don't allow customisation settings
    --> 2. Put a switch in the class' constructor (defaulting to user-supplied input), to specifc whether the data is coming from the DB or from the user
        private $fromDB;
        public function __construct($param1, $param2, $fromDB = false) {$this->fromDB = $fromDB}
        public function setSomething($something)
        {
            if(!$this->fromDB)
                if(failsValidation)
                    throw exception
        }
        problem is that it involves additional IF statements in all mutator methods...

> Resources:
--> Footer info: http://www.bourncreative.com/a-website-footer-more-than-a-copyright-notice/

http://lindseystraining.co.uk/